<snippet>
	<content><![CDATA[
const int nmax = 1e5 + 10, alpha = 30;
int current_node;
int nextw[nmax][alpha], parent[nmax], wordcount[nmax], endcount[nmax];
int makenode(int par) {
    if(par == -1) {
        current_node = 0;
    }
    parent[current_node] = par;
    memset(nextw, -1, sizeof nextw);
    wordcount[current_node] = 0, endcount[current_node] = 0;
    
    return current_node++; // return the value current_node before increamenting.
}
int trieinsert(string s, int val) {
    int cur = 0;
    wordcount[cur]++;
    int n = s.length();
    for(int i = 0; i < n; i++) {
        if(nextw[cur][s[i] - 'a'] == -1) {
            nextw[cur][s[i] - 'a'] = makenode(cur); 
        }
        cur = nextw[cur][s[i] - 'a'];
        wordcount[cur]++;
    }
    endcount[cur]++;
    return cur;
}

int triesearch(string s) {
    int cur = 0;
    int n = s.length();
    int i;
    for(i = 0; i < n; i++) {
        // debug(), dbg(cur);
        if(nextw[cur][s[i] - 'a'] == -1) {
            return -1;
        } else {
            cur = nextw[cur][s[i] - 'a'];
        }
    }

    return endcount[cur];
}


// first of all call the function makenode(-1) to create a empty node which is 0 

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>trie</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
